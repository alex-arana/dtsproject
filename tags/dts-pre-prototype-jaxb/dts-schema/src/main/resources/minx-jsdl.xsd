<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    targetNamespace="http://schemas.dataminx.org/dts/2009/07/jsdl"
    xmlns:mjsdl="http://schemas.dataminx.org/dts/2009/07/jsdl"
    xmlns:jsdl="http://schemas.ggf.org/jsdl/2005/11/jsdl"
    xmlns:dmi="http://schemas.ogf.org/dmi/2008/05/dmi"
    xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    elementFormDefault="qualified" version="1">
    
    <!-- Import the Schemas which have been specified outside of the MINX project -->
    <xsd:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
                schemaLocation="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" />
    <xsd:import namespace="http://schemas.ggf.org/jsdl/2005/11/jsdl"
                schemaLocation="jsdl-redef.xsd" />
    <xsd:import namespace="http://schemas.ogf.org/dmi/2008/05/dmi"
                schemaLocation="dmi-redef.xsd" />
                
    <!-- Extension to the JSDL and OGSA-DMI Specifications follows -->
    
    <!-- It's probably better to have CreationFlag grouped with TransferRequirements -->
    <xsd:complexType name="MinxTransferRequirementsType">
        <xsd:complexContent>
            <xsd:extension base="dmi:TransferRequirementsType">
                <xsd:sequence>
                    <xsd:element ref="jsdl:CreationFlag" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="TransferRequirements" type="mjsdl:MinxTransferRequirementsType" />
        
    <xsd:complexType name="MyProxyTokenType">
        <xsd:annotation>
            <xsd:documentation>
                Information that needs to be provided to get a user's credential
                from MyProxy
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="MyProxyUsername" type="xsd:string" />
            <xsd:element name="MyProxyPassword" type="xsd:string" />
            <xsd:element name="MyProxyServer" type="xsd:string" />
            <xsd:element name="MyProxyPort" type="xsd:int" default="7512" />
            <xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:anyAttribute namespace="##other"
            processContents="lax" />
    </xsd:complexType>
    <xsd:element name="MyProxyToken" type="mjsdl:MyProxyTokenType" />
    
    <xsd:complexType name="OtherCredentialTokenType">
        <xsd:annotation>
            <xsd:documentation>
                A wrapper for credential tokens that are not specified in the
                Credential element. This is also a workaround so we don't get this
                error message
                
                cos-nonambig: wsse:UsernameToken and WC During validation against this 
                schema, ambiguity would be created for those two particles.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:anyAttribute namespace="##other"
            processContents="lax" />
    </xsd:complexType>
    <xsd:element name="OtherCredentialToken" type="mjsdl:OtherCredentialTokenType" />

    <xsd:complexType name="CredentialType">
        <xsd:choice>
            <xsd:element ref="wsse:UsernameToken" />
            <xsd:element ref="mjsdl:MyProxyToken" />
            <xsd:element ref="mjsdl:OtherCredentialToken" />
        </xsd:choice>
        <xsd:anyAttribute namespace="##other"
            processContents="lax" />
    </xsd:complexType>
    <xsd:element name="Credential" type="mjsdl:CredentialType" />

    <xsd:complexType name="GridFtpURIPropertiesType">
        <xsd:sequence>
            <xsd:element name="PortRange" type="mjsdl:PortRangeType" minOccurs="0" />
            <xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:anyAttribute namespace="##other"
            processContents="lax" />
    </xsd:complexType>
    <xsd:element name="GridFtpURIProperties" type="mjsdl:GridFtpURIPropertiesType" substitutionGroup="mjsdl:URIProperties" />
        
    <xsd:complexType name="PortRangeType">
        <xsd:sequence>
            <xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="RangeMin" type="xsd:int" use="required" />
        <xsd:attribute name="RangeMax" type="xsd:int" use="required" />
        <xsd:anyAttribute namespace="##other"
            processContents="lax" />
    </xsd:complexType>
    <xsd:element name="PortRange" type="mjsdl:PortRangeType" />
    
    <!-- 
    <xsd:element name="SrbURIProperties" substitutionGroup="tns:URIProperties">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="McatZone" minOccurs="0">
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string" />
                    </xsd:simpleType>
                </xsd:element>
                <xsd:element name="MdasDomain" minOccurs="0">
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string" />
                    </xsd:simpleType>
                </xsd:element>
                <xsd:element name="HomeDirectory" minOccurs="0">
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string" />
                    </xsd:simpleType>
                </xsd:element>
                <xsd:element name="DefaultResource" minOccurs="0">
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string" />
                    </xsd:simpleType>
                </xsd:element>
                <xsd:element ref="tns:PortRange" minOccurs="0" />
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    -->
    
    <!-- 
        Now lets extend JSDL's SourceTarget_Type to temporarily make our lives easy in terms
        of implementing the DTS WebService and WorkerNode modules. Let's have Credential and
        URIProperties specified in our own SourceTargetType for now and not rely on the 
        JSDL's SourceTarget_Type xsdany element.
        .
    -->
    <xsd:complexType name="MinxSourceTargetType">
        <xsd:complexContent>
            <xsd:extension base="jsdl:SourceTarget_Type">
                <xsd:sequence>
                    <xsd:element ref="mjsdl:Credential" minOccurs="0" />
                    <xsd:element ref="mjsdl:URIProperties" minOccurs="0" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="Source" type="mjsdl:MinxSourceTargetType" />
    <xsd:element name="Target" type="mjsdl:MinxSourceTargetType" />
    
    <!-- 
        Specify our own DataTransferType as JSDL's DataStaging_Type's original purpose is only
        for staging in/out files that the compute job need/output and not defining a transfer-only
        type of job
    -->
    <xsd:complexType name="DataTransferType">
        <xsd:sequence>
            <xsd:element ref="mjsdl:Source" />
            <xsd:element ref="mjsdl:Target" />
            <xsd:element ref="mjsdl:TransferRequirements" />
            <xsd:any namespace="##other" processContents="lax"
                minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="optional" />
        <!--
            TODO: add an attribute that can be used to identify this DataTransfer instance from the one
            big DataTransfer JobDefinition
        -->
        <xsd:anyAttribute namespace="##other"
            processContents="lax" />
    </xsd:complexType>
    <xsd:element name="DataTransfer" type="mjsdl:DataTransferType" />

    <!-- 
        Need to extend JSDL's JobDescription_Type again since we're forcing our own 
        JobDescriptionType to hold our custom DataTransferType
    -->
    <xsd:complexType name="MinxJobDescriptionType">
        <xsd:complexContent>
            <xsd:extension base="jsdl:JobDescription_Type">
                <xsd:sequence>
                    <xsd:element ref="mjsdl:DataTransfer" minOccurs="1"
                        maxOccurs="unbounded" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="JobDescription" type="mjsdl:MinxJobDescriptionType" />
    
    
    <!-- Lone elements -->
    <xsd:element name="JobResourceKey" type="xsd:anyURI" />
    <xsd:element name="URIProperties" abstract="true" />

</xsd:schema>