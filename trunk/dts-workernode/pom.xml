<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="
           http://maven.apache.org/POM/4.0.0
           http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>minx-dts</artifactId>
    <groupId>${dataminx.group}</groupId>
    <version>${minx-dts.version}</version>
  </parent>

  <name>MINX-DTS Worker Node</name>
  <artifactId>dts-workernode</artifactId>
  <packaging>war</packaging>

  <properties>
    <servlet.version>2.4</servlet.version>
  </properties>

  <build>
    <!--
      Enable resource filters as a workaround to the issue of accidentally uploading Credential details on the test
      files. Using filters is also a good way to avoid overwriting another developers desktop specific settings (ie
      Windows or Unix format used for 'file://')
    -->
    <filters>
      <filter>src/test/filters/filter.properties</filter>
    </filters>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <configuration>
          <mainClass>org.dataminx.dts.wn.DtsWorkerNodeCommandLineRunner</mainClass>
          <classpathScope>runtime</classpathScope>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-eclipse-plugin</artifactId>
        <configuration>
          <wtpversion>2.0</wtpversion>
          <useProjectReferences>true</useProjectReferences>
          <additionalBuildcommands>
            <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
          </additionalBuildcommands>
          <additionalProjectnatures>
            <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
          </additionalProjectnatures>
        </configuration>
      </plugin>


       <!-- unit and integration test declaration -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
            <!-- systemPropertyVariables is the replacement of the deprecated
            systemProperties. Important: It can accept any value from
            Maven's properties that can be converted to String value !!! -->
          <systemPropertyVariables>
            <dataminx.dir>${dataminx.dir}</dataminx.dir>
          </systemPropertyVariables>
          <systemPropertyVariables>
            <trustStore>${javax.net.ssl.trustStore}</trustStore>
          </systemPropertyVariables>
          <systemPropertyVariables>
            <trustStorePassword>${javax.net.ssl.trustStorePassword}</trustStorePassword>
          </systemPropertyVariables>
          <excludes>
<!--
To separate tests from integration tests:
  mvn test
  mvn integration-test
To run a specified test or integration test:
  mvn -Ddataminx.dir=/home/djm76/.dataminxes -Dtest=ProcessDtsJobMessageIntegrationTest test

Could also use system property and the following exclude pattern
"<exclude>${surefireExclude}</exclude>" to separate integration tests from unit tests.
For goals that do not want to run integration tests (e.g. install or test)
the system property "surefireExclude" should be set to "**/*IntegrationTest.java".
For goal that should run integration tests (e.g. site:site or integration-test)
the system property "surefireExclude" should be not set (could also set to "none").
Examples:
To exclude integeration tests:    mvn -DsurefireExclude=**/*IntegrationTest.java test
To integration test:              mvn integration-test
-->
              <exclude>**/*IntegrationTest.java</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>surefire-itest</id>
            <phase>integration-test</phase>
            <goals>
              <goal>test</goal>
            </goals>
            <configuration>
              <excludes>
                <exclude>none</exclude>
              </excludes>
              <includes>
                <include>**/*IntegrationTest.java</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>

      
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <artifactId>dts-build-tools</artifactId>
      <groupId>${dataminx.group}</groupId>
    </dependency>
    <dependency>
      <artifactId>dts-common</artifactId>
      <groupId>${dataminx.group}</groupId>
    </dependency>
    <dependency>
      <artifactId>dts-batchjob</artifactId>
      <groupId>${dataminx.group}</groupId>
    </dependency>

    <dependency>
      <artifactId>dts-schema</artifactId>
      <groupId>${dataminx.group}</groupId>
    </dependency>
     
    <!-- Mockito -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- SL4J -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <!--<version>1.5.5</version>-->
    </dependency>

    <!-- Log4J -->
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
    </dependency>

    <!-- commons-collections -->
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
    </dependency>

    <!-- commons-lang -->
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
    </dependency>

    <!-- commons-logging -->
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
    </dependency>

    <!-- commons-net -->
    <dependency>
      <groupId>commons-net</groupId>
      <artifactId>commons-net</artifactId>
    </dependency>

    <!-- Spring Framework -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring</artifactId>
    </dependency>

    <!-- Spring Test -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
    </dependency>

    <!-- Spring Integration -->
    <dependency>
      <groupId>org.springframework.integration</groupId>
      <artifactId>spring-integration-core</artifactId>
    </dependency>

    <!-- Spring Integration JMS -->
    <dependency>
      <groupId>org.springframework.integration</groupId>
      <artifactId>spring-integration-jms</artifactId>
    </dependency>

    <!-- Spring Integration XML -->
    <dependency>
      <groupId>org.springframework.integration</groupId>
      <artifactId>spring-integration-xml</artifactId>
    </dependency>

    <!-- Spring OXM -->
    <dependency>
      <groupId>org.springframework.ws</groupId>
      <artifactId>spring-oxm</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.ws</groupId>
      <artifactId>spring-oxm-tiger</artifactId>
    </dependency>

    <!-- Spring Batch -->
    <!-- 
    <dependency>
      <groupId>org.springframework.batch</groupId>
      <artifactId>org.springframework.batch.core</artifactId>
    </dependency>
    -->

    <!-- Spring Batch Integration -->
    <!-- 
    <dependency>
      <groupId>org.springframework.batch</groupId>
      <artifactId>spring-batch-integration</artifactId>
    </dependency>
    -->

    <!-- JMS -->
    <dependency>
      <groupId>javax.jms</groupId>
      <artifactId>jms</artifactId>
    </dependency>

    <!-- commons-vfs-grid -->
    <!--
    <dependency>
      <groupId>commons-vfs-grid</groupId>
      <artifactId>commons-vfs-grid</artifactId>
    </dependency>
    -->

    <dependency>
      <groupId>org.apache.xmlbeans</groupId>
      <artifactId>xmlbeans</artifactId>
    </dependency>

    <!-- JUnit -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- TestNG -->
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>${testng.version}</version>
      <scope>test</scope>
      <classifier>jdk15</classifier>
    </dependency>

    <!-- Java Secure Channel JSCh -->
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- ActiveMQ -->
    <dependency>
      <artifactId>activemq-all</artifactId>
      <groupId>org.apache.activemq</groupId>
      <scope>runtime</scope>
    </dependency>

    <!-- Jettison -->
    <dependency>
      <groupId>org.codehaus.jettison</groupId>
      <artifactId>jettison</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- XStream -->
    <dependency>
      <groupId>com.thoughtworks.xstream</groupId>
      <artifactId>xstream</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- C3P0 -->
    <!-- 
    <dependency>
      <groupId>c3p0</groupId>
      <artifactId>c3p0</artifactId>
      <scope>runtime</scope>
    </dependency>
    -->

    <!-- commons-httpclient -->
    <dependency>
      <groupId>commons-httpclient</groupId>
      <artifactId>commons-httpclient</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- commons-io -->
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <scope>test</scope>
    </dependency>

    <!--
        The following security libraries will need to be commented out from the
        respective DTS module pom files if we are to deploy the following DTS
        modules (ws, workernode, portal) on a single web container

        TODO: decide on how shared/unshared security libraries can be dealt with
        if we are going to support deployment of the DTS modules in a single or
        multiple web containers.
    -->
    <dependency>
      <groupId>external.jglobus</groupId>
      <artifactId>cryptix32</artifactId>
    </dependency>
    <dependency>
      <groupId>external.jglobus</groupId>
      <artifactId>cryptix-asn1</artifactId>
    </dependency>
    <dependency>
      <groupId>external.jglobus</groupId>
      <artifactId>cryptix</artifactId>
    </dependency>
    <dependency>
      <groupId>external.jglobus</groupId>
      <artifactId>puretls</artifactId>
    </dependency>
    <dependency>
      <groupId>bouncycastle</groupId>
      <artifactId>bcprov-jdk16</artifactId>
    </dependency>

    <!-- Proxy Light -->
    <!--<dependency>
        <groupId>au.org.arcs.auth</groupId>
        <artifactId>simpleProxyLib</artifactId>
    </dependency>-->

    <!-- Unitils -->
    <dependency>
      <groupId>org.unitils</groupId>
      <artifactId>unitils</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ognl</groupId>
      <artifactId>ognl</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.objenesis</groupId>
      <artifactId>objenesis</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>cglib</groupId>
      <artifactId>cglib</artifactId>
    </dependency>
    <dependency>
      <groupId>asm</groupId>
      <artifactId>asm-tree</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>asm</groupId>
      <artifactId>asm-analysis</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymockclassextension</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>${servlet.version}</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>
<profiles>
      <profile>
         <!-- This profile should be used for running the assembly plugin, i.e:
         "mvn assembly:assembly -Pdeploy-assembly1"
         This profile is used to create a standalone worker node agent that can be used
         by running "java -jar dts-workernode-${artifact.version}.jar" -->
         <id>deploy-assembly1</id>
          <build>
              <plugins>
                  <!--
                  maven-jar-plugin
                  Specify the manifest's mainClass as a standalone worker node agent.
                  Also addClasspath which will add all runtime
                  dependencies to the classpath attribute in the manifest.
                  -->
                  <plugin>
                      <groupId>org.apache.maven.plugins</groupId>
                      <artifactId>maven-jar-plugin</artifactId>
                      <configuration>
                        <archive>
                          <manifest>
                             <mainClass>org.dataminx.dts.wn.DtsWorkerNodeCommandLineRunner</mainClass>
                             <addClasspath>true</addClasspath>
                             <!--<classpathPrefix>lib</classpathPrefix>-->
                          </manifest>
                        </archive>
                      </configuration>
                  </plugin>

                  <!-- maven assembly plugin -->
                  <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <configuration>
                      <descriptors>
                        <descriptor>src/main/assembly/assembly1.xml</descriptor>
                      </descriptors>
                      <!--<descriptorRefs>
                            <descriptorRef>
                                jar-with-dependencies
                            </descriptorRef>
                      </descriptorRefs>-->
                    </configuration>
                  </plugin>  
              </plugins>
          </build>
      </profile>
  </profiles>
</project>
