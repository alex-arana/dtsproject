<?xml version="1.0" encoding="UTF-8"?>
<!--
    Document   : dmi-wrappedMessagesProposals.xml
    Created on : 09 September 2009, 14:19
    Author     : David Meredith
    Description:
       Defines multiple WrappedSourceSinkDEPR elements within a single
       GetWrappedDataTransferInstanceRequestMessage. We would like to be able
       to define this type data transfer request in order to transfer multiple
       files/directories witin a single 'atomic' request message/packet (see below).

       See http://www.eaipatterns.com/MessagingComponentsIntro.html
       Quote from eaipatterns:
       "A Message is an atomic packet of data that can be transmitted on a channel.
       Thus to transmit data, an application must break the data into one or more
       packets, wrap each packet as a message, and then send the message on a
       channel. "


       For example, a WS could implement the GetWrappedDataTransferInstanceRequest
       operation which accepts a single document (packet).

       Therefore, rather than define a single source and sink as before:
           GetDataTransferInstance( [source DEPR], [sink DEPR], [transfer requirements] );
       We define:
           SubmitWrappedDataTransferInstanceRequestMessage ;


    Pseudo schema request:
    ======================
    <dmi-msg:SubmitWrappedDataTransferRequestMessage>
        <dmi-msg:Start/>
        <dmi-msg:WrappedSourceSinkDEPRs>
            <dmi-msg:SourceDEPR></dmi-msg:SourceDEPR>
            <dmi-msg:SinkDEPR></dmi-msg:SinkDEPR>
            <dmi-msg:TransferRequirements/>
        </dmi-msg:WrappedSourceSinkDEPRs>
        <dmi-msg:WrappedSourceSinkDEPRs>
            <dmi-msg:SourceDEPR></dmi-msg:SourceDEPR>
            <dmi-msg:SinkDEPR></dmi-msg:SinkDEPR>
            <dmi-msg:TransferRequirements/>
        </dmi-msg:WrappedSourceSinkDEPRs>
        <dmi-msg:WrappedSourceSinkDEPRs>
            <dmi-msg:SourceDEPR></dmi-msg:SourceDEPR>
            <dmi-msg:SinkDEPR></dmi-msg:SinkDEPR>
            <dmi-msg:TransferRequirements/>
        </dmi-msg:WrappedSourceSinkDEPRs>
        ...
    </dmi-msg:SubmitWrappedDataTransferRequestMessage>

    Pseudo schema response:
    =======================
   <dmi-msg:GetWrappedDataTransferInstanceResponseMessage>
       <dmi-msg:JobID>jobid-adfafq24-59-4-13</dmi-msg:JobID>
   </dmi-msg:GetWrappedDataTransferInstanceResponseMessage>
-->
<schema
targetNamespace="http://schemas.ogf.org/dmi/2009/09/dmi/rendering/wrapped"
xmlns="http://www.w3.org/2001/XMLSchema"
xmlns:dmi="http://schemas.ogf.org/dmi/2008/05/dmi"
xmlns:dmi-wrapped="http://schemas.ogf.org/dmi/2009/09/dmi/rendering/wrapped"
xmlns:wsa="http://www.w3.org/2005/08/addressing" elementFormDefault="qualified">


  <!-- ======================================================== -->
  <!-- ==                                                    == -->
  <!-- == OGSA DMI WS-I 'Wrapped' Message model proposal (draft)  == -->
  <!-- ==                                                    == -->
  <!-- == This XML Schema document defines the XML elements  == -->
  <!-- == necessary to define WS-I compliant WS operations   == -->
  <!-- == and messages.                                      == -->
  <!-- ======================================================== -->

  <import namespace="http://www.w3.org/2005/08/addressing" schemaLocation="http://www.w3.org/2006/03/addressing/ws-addr.xsd"/>

  <import namespace="http://schemas.ogf.org/dmi/2008/05/dmi" schemaLocation="../dmi.xsd"/>


  <!-- ============================================ -->
  <!-- == Factory / Instance Fault message model == -->
  <!-- ============================================ -->

  <!-- Common type for all OGSA-DMI specific faults -->
  <complexType name="DMIFaultType">
    <sequence>
      <element name="Message" type="string"/>
      <element name="Timestamp" type="dateTime"/>
      <any namespace="#other" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <!-- UnsatisfiableRequestOptionsFault message -->
  <element name="UnsatisfiableRequestOptionsFault" type="dmi-wrapped:UnsatisfiableRequestOptionsFaultType"/>
  <complexType name="UnsatisfiableRequestOptionsFaultType">
    <complexContent>
      <extension base="dmi-wrapped:DMIFaultType"/>
    </complexContent>
  </complexType>

  <!-- NoTransferProtocolAgreementFault message -->
  <element name="NoTransferProtocolAgreementFault" type="dmi-wrapped:NoTransferProtocolAgreementFaultType"/>
  <complexType name="NoTransferProtocolAgreementFaultType">
    <complexContent>
      <extension base="dmi-wrapped:DMIFaultType"/>
    </complexContent>
  </complexType>

  <!-- IncorrectStateFault message -->
  <element name="IncorrectStateFault" type="dmi-wrapped:IncorrectStateFaultType"/>
  <complexType name="IncorrectStateFaultType">
    <complexContent>
      <extension base="dmi-wrapped:DMIFaultType"/>
    </complexContent>
  </complexType>

  <!-- FailedStateTransitionFault message -->
  <element name="FailedStateTransitionFault" type="dmi-wrapped:FailedStateTransitionFaultType"/>
  <complexType name="FailedStateTransitionFaultType">
    <complexContent>
      <extension base="dmi-wrapped:DMIFaultType"/>
    </complexContent>
  </complexType>

  <!-- RequestedStateNotSupportedFault message -->
  <element name="RequestedStateNotSupportedFault" type="dmi-wrapped:RequestedStateNotSupportedFaultType"/>
  <complexType name="RequestedStateNotSupportedFaultType">
    <complexContent>
      <extension base="dmi-wrapped:DMIFaultType"/>
    </complexContent>
  </complexType>

  <!-- CustomFault message -->
  <element name="CustomFault" type="dmi-wrapped:CustomFaultType"/>
  <complexType name="CustomFaultType">
    <complexContent>
      <extension base="dmi-wrapped:DMIFaultType"/>
    </complexContent>
  </complexType>

  <!-- TransferProtocolNotInstantiatableFault message -->
  <element name="TransferProtocolNotInstantiatableFault" type="dmi-wrapped:TransferProtocolNotInstantiatableFaultType"/>
  <complexType name="TransferProtocolNotInstantiatableFaultType">
    <complexContent>
      <extension base="dmi-wrapped:DMIFaultType">
        <sequence>
          <element name="Protocol" type="anyURI"/>
          <element name="SourceDEPR" type="wsa:EndpointReferenceType" minOccurs="0"/>
          <element name="SinkDEPR" type="wsa:EndpointReferenceType" minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>


  <!-- ================================================= -->
  <!-- == Data Transfer Service related message model == -->
  <!-- ================================================= -->

  <!--
    Operation "GetServiceAttributesDocument"
    =========================================
    Input:  n/a
    Output: <dmi:ServiceAttributes />
    Faults: n/a
  -->
  <!-- Request Message -->
  <element name="GetServiceAttributesDocumentRequestMessage"/>
  <!-- Response Message -->
  <element name="GetServiceAttributesDocumentResponseMessage" type="dmi-wrapped:GetServiceAttributesDocumentResponseType"/>
  <complexType name="GetServiceAttributesDocumentResponseType">
    <sequence>
      <element name="ServiceAttributes" type="dmi-wrapped:ServiceAttributesType"/>
    </sequence>
  </complexType>


  <!-- Supplementary elements -->
  <complexType name="ServiceAttributesType">
    <sequence>
      <element name="SupportedProtocol" type="dmi:SupportedProtocolType" maxOccurs="unbounded"/>
      <any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <!--
    Operation "SubmitWrappedDataTransferRequest"
    =====================================
    Input:  <dmi-wrapped:GetWrappedDataTransferInstanceRequestMessage>
    Output: <dmi-wrapped:GetWrappedDataTransferInstanceResponseMessage />
    Faults: <dmi:UnsatisfiableRequestOptionsFault />
            <dmi:NoTransferProtocolAgreementFault />
            <dmi:CustomFault />
  -->
  <!-- Request Message -->
  <element name="SubmitWrappedDataTransferRequestMessage" type="dmi-wrapped:GetWrappedDataTransferInstanceRequestType"/>
  <complexType name="GetWrappedDataTransferInstanceRequestType">
    <sequence>
        <!--
        define optional start element so that you don't have to submit an extra
        dmi-wrapped:StartRequestMessage to the service service. if not provided,
        then follow dmi state model. 
        -->
        <element name="Start" minOccurs="0" maxOccurs="1"/>
        <!--
        here we wrap multiple GetDataTransferInstanceRequestTypes to provide
        multiple data transfers.
        -->
        <element name="WrappedSourceSinkDEPR" type="dmi-wrapped:GetDataTransferInstanceRequestType" minOccurs="1" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <complexType name="GetDataTransferInstanceRequestType">
    <sequence>
      <element name="SourceDEPR" type="wsa:EndpointReferenceType"/>
      <element name="SinkDEPR" type="wsa:EndpointReferenceType"/>
      <element name="TransferRequirements" type="dmi:TransferRequirementsType"/>
    </sequence>
  </complexType>

  <!-- Response Message -->
  <element name="GetWrappedDataTransferInstanceResponseMessage" type="dmi-wrapped:GetWrappedDataTransferInstanceResponseType"/>
  <complexType name="GetWrappedDataTransferInstanceResponseType">
    <sequence>
        <!--
        At present return a single JobID for the whole 'bulk' transfer
        (since a bulk transfer can be made up of multiple sub transfers).
        This implies that any subsequent request that uses this id (e.g. a request for state,
        or a request for the dmi instance attributes document) refers to the state of the
        whole 'bulk' transfer. for example, the total number of bytes transfered
        would be calculated across all the sub-transfers. Similary, if one sub
        transfer failed out of ten, then the state of the bulk transfer would be
        'failed'.

        This could certainly be extended further if it is a requirement to query
        the state of each separate sub-transfer. To do this, the request message
        (GetDataTransferInstanceRequestType) would
        have to be extended to incorporate additional user defined sub-transfer tags/ids
        elements defined for each separate sub-transfer
        (e.g. mytransferA, mytransferB, mytransferC). In doing
        this, any subsequent request made by the client could use a combination of the JobID and the
        sub-transfer tag/id (ie. '<JobID>:<transferTag>') to isolate that specific
        sub-transfer. The returned state would then represent only that sub-transfer 
        as per the dmi spec.
        Note, it is important that the client assigns the sub-transfer tags/ids
        while the service assigns the bulk transfer JobID. This is because we do
        not want to place any significance on the ordering of the sub-transfers
        in the intial request. 
        -->
      <element ref="dmi-wrapped:JobID"/>
    </sequence>
  </complexType>







  <!-- ================================================== -->
  <!-- == Data Transfer Instance related message model == -->
  <!-- ================================================== -->

  <!--
    Operation "GetInstanceAttributesDocument"
    =========================================
    Input:  JobID
    Output: <dmi:InstanceAttributes />
    Faults: n/a
  -->
  <!-- Request Message -->
  <element name="GetWrappedInstanceAttributesDocumentRequestMessage">
    <complexType>
      <sequence>
        <element ref="dmi-wrapped:JobID"/>
      </sequence>
    </complexType>
  </element> 
  <!-- Response Message -->
  <element name="GetWrappedInstanceAttributesDocumentResponseMessage" type="dmi-wrapped:GetInstanceAttributesDocumentResponseType"/>
  <complexType name="GetInstanceAttributesDocumentResponseType">
    <sequence>
        <!--
        note, the InstanceAttributes doc represents the whole 'wrapped' transfer
        which can consist of multiple sub-transfers. Consequently, attributes
        such as TotalDataSize, BytesTransferred, StartTime, Attepts etc are
        calculated across all the sub-transfers. This could easily be extended

        Refer to above definition of GetWrappedDataTransferInstanceResponseMessage
        for more info.
        -->
        <element name="InstanceAttributes" type="dmi-wrapped:InstanceAttributesType"/>
    </sequence>
  </complexType>



  <!-- Supplementary elements -->

  <element name="JobID" type="string"/>

  <complexType name="InstanceAttributesType">
    <sequence>
      <element ref="dmi:StartTime" minOccurs="0"/>
      <element ref="dmi:State"/>
      <element ref="dmi:CompletionTime" minOccurs="0"/>
      <element ref="dmi:TotalDataSize" minOccurs="0"/>
      <element ref="dmi:BytesTransferred" minOccurs="0"/>
      <element ref="dmi:Attempts"/>
      <any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <!--
    Operation "GetStatus"
    ======================
    Input:  JobID
    Output: <dmi:Status />
    Faults: n/a
  -->
  <!-- Request Message -->
  <element name="GetStatusRequestMessage">
    <complexType>
      <sequence>
        <element ref="dmi-wrapped:JobID"/>
      </sequence>
    </complexType>
  </element>
  <!-- Response Message -->
  <element name="GetStatusResponseMessage" type="dmi-wrapped:GetStatusResponseType"/>
  <complexType name="GetStatusResponseType">
    <sequence>
      <element ref="dmi:State"/>
    </sequence>
  </complexType>

  <!--
    Operation "Start"
    ======================
    Input:  JobID
    Output: n/a
    Faults: <dmi:IncorrectStateFault />
            <dmi:FailedStateTransitionFault />
            <dmi:TransferProtocolNotInstantiatableFault />
            <dmi:CustomFault />
  -->
  <!-- Request Message -->
  <element name="StartRequestMessage">
    <complexType>
      <sequence>
        <element ref="dmi-wrapped:JobID"/>
      </sequence>
    </complexType>
  </element>
  <!-- Response Message -->
  <element name="StartResponseMessage"/>

  <!--
    Operation "Activate"
    ======================
    Input:  JobID
    Output: n/a
    Faults: <dmi:IncorrectStateFault />
            <dmi:FailedStateTransitionFault />
            <dmi:CustomFault />
  -->
  <!-- Request Message -->
  <element name="ActivateRequestMessage">
    <complexType>
      <sequence>
        <element ref="dmi-wrapped:JobID"/>
      </sequence>
    </complexType>
  </element>
  <!-- Response Message -->
  <element name="ActivateResponseMessage"/>

  <!--
    Operation "stop"
    ======================
    Input:  JobID
    Output: n/a
    Faults: <dmi:IncorrectStateFault />
            <dmi:FailedStateTransitionFault />
            <dmi:CustomFault />
  -->
  <!-- Request Message -->
  <element name="StopRequestMessage">
    <complexType>
      <sequence>
        <element ref="dmi-wrapped:JobID"/>
      </sequence>
    </complexType>
  </element>
  <!-- Response Message -->
  <element name="StopResponseMessage"/>

  <!--
    Operation "restart"
    ======================
    Input:  JobID
    Output: n/a
    Faults: <dmi:IncorrectStateFault />
            <dmi:FailedStateTransitionFault />
            <dmi:CustomFault />
  -->
  <!-- Request Message -->
  <element name="ResumeRequestMessage">
    <complexType>
      <sequence>
        <element ref="dmi-wrapped:JobID"/>
      </sequence>
    </complexType>
  </element>
  <!-- Response Message -->
  <element name="ResumeResponseMessage"/>

  <!--
    Operation "suspend"
    ======================
    Input:  JobID
    Output: n/a
    Faults: <dmi:IncorrectStateFault />
            <dmi:FailedStateTransitionFault />
            <dmi:CustomFault />
  -->
  <!-- Request Message -->
  <element name="SuspendRequestMessage">
    <complexType>
      <sequence>
        <element ref="dmi-wrapped:JobID"/>
      </sequence>
    </complexType>
  </element>
  <!-- Response Message -->
  <element name="SuspendResponseMessage"/>

</schema>