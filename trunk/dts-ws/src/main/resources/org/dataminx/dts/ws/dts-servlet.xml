<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd">

  <!-- Enable Spring beans annotation support -->
  <context:annotation-config/>

  <!-- 
  Add automatic WSDL generation/publishing support.
  
  WSDL Generation: 
  This SpringWS bean uses the 'Request' and 'Response' naming conventions used in WS messages,
  i.e. assuming there are both 'HolidayRequest' and 'HolidayResponse' elements in the
  imported schema collection, then these elements will be used to define input and output
  messages for a wsdl:operation called 'Holiday'

  WSDL Publishing:
  The bean id determines the URL where the '.wsdl' file can be retrieved, in this case
  it will be "http://${ws.host}:${ws.port}/${ws.context.path}/dts.wsdl"
  -->
  <bean id="dts"
    class="org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition">
    <property name="schemaCollection" ref="schemaCollection" />
    <property name="portTypeName" value="DataTransferService" />
    <property name="locationUri" value="http://${ws.host}:${ws.port}/${ws.context.path}/" />
    <!--
    Optionally give the tns for the WSDL defintion itself. If not set, the WSDL
    will have the same namespace as the schema.
      <property name="targetNamespace" value="http://schemas.dataminx.org/dts/2009/05/dts" />
    -->
  </bean>

  <bean id="schemaCollection" class="org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection">
    <property name="xsds">
      <list>
        <!--
        <value>classpath:dmi.xsd</value>
        <value>classpath:dmi-redef.xsd</value>
        <value>classpath:jsdl.xsd</value>
        <value>classpath:jsdl-redef.xsd</value>
        <value>classpath:minx-jsdl.xsd</value>
        <value>classpath:minx-jms-messages.xsd</value>
        <value>classpath:minx-dts-messages.xsd</value>
        -->
        <value>classpath:dmi-common.xsd</value>
        <value>classpath:minx-dts-messages.xsd</value>
        <!--
        <value>classpath:minx-event-callback-messages.xsd</value>
        <value>classpath:minx-misc.xsd</value>
        -->
      </list>
    </property>
    <property name="inline" value="true" />
  </bean>


  <!-- 
  Register Endpoint Mapping
  Defines how incoming messages are routed to the WS endpoint. Here we define a 
  PayloadRootAnnotationMethodEndpointMapping which means Endpoints are identified 
  using @Endpoint annotations in Spring WS beans (see dataTransferEndpoint below)
  -->
  <bean class="org.springframework.ws.server.endpoint.mapping.PayloadRootAnnotationMethodEndpointMapping">
    <property name="interceptors">
      <list>
        <ref local="loggingInterceptor" />
        <!-- TODO: need to look into why I couldn't get the two interceptors to work together -->
        <!-- <ref local="wsSecurityInterceptor" />-->
        <ref local="dtsJaasCredentialInterceptor" />
      </list>
    </property>
  </bean>

  <bean id="loggingInterceptor" class="org.springframework.ws.soap.server.endpoint.interceptor.SoapEnvelopeLoggingInterceptor">
  </bean>

    <!-- this one's giving me the cos-noambit issue. might not be using the defined oxm -->
    <!--
    <bean id="validatingInterceptor"
        class="org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor">
        <property name="xsdSchemaCollection" ref="schemaCollection"/>
        <property name="validateRequest" value="false"/>
        <property name="validateResponse" value="true"/>
    </bean>
    -->

  <bean id="wsSecurityInterceptor" class="org.springframework.ws.soap.security.xwss.XwsSecurityInterceptor">
    <property name="policyConfiguration" value="classpath:securityPolicy.xml" />
    <property name="secureResponse" value="false" />
    <property name="callbackHandlers">
      <list>
        <ref bean="jaasValidationHandler" />
      </list>
    </property>
  </bean>

  <bean id="jaasValidationHandler" class="org.springframework.ws.soap.security.xwss.callback.jaas.JaasPlainTextPasswordValidationCallbackHandler">
    <property name="loginContextName" value="DtsWebService" />
  </bean>

  <bean id="dtsJaasCredentialInterceptor" class="org.dataminx.dts.ws.interceptor.DtsJaasCredentialInterceptor" scope="prototype">
    <property name="loginContextName" value="DtsWebService" />
  </bean>

  <!-- 
  Register Endpoint.
  Bean defines an @Endpoint and @PayloadRoot annotations to
  invoke the correct endpoint operations (used in conjunction with 
  PayloadRootAnnotationMethodEndpointMapping defined above).
  -->
  <bean id="dataTransferEndpoint" class="org.dataminx.dts.ws.DataTransferServiceEndpoint">
    <description>This endpoint handles data transfer requests.</description>
    <property name="dtsJobDefinitionValidator" ref="dtsJobDefinitionValidator" />
    <property name="messageSource" ref="messageSource" />
    <property name="dataTransferService" ref="dataTransferService" />
  </bean>

  <bean id="dtsJobDefinitionValidator" class="org.dataminx.dts.common.validator.DefaultDtsJobDefinitionValidator">
    <!--  <property name="jobIdentificationValidator" ref="jobIdentificationValidator"/>-->
    <!--  <property name="sourceTargetValidator" ref="sourceTargetValidator"/> -->
    <property name="dataLocationsTypeValidator" ref="dataLocationsTypeValidator"/>
  </bean>

   <!--  <bean id="jobIdentificationValidator" class="org.dataminx.dts.common.validator.DefaultJobIdentificationValidator"/> -->
   <!--  <bean id="sourceTargetValidator" class="org.dataminx.dts.common.validator.DefaultSourceTargetValidator"/> -->
   <bean id="dataLocationsTypeValidator" class="org.dataminx.dts.common.validator.DefaultDataLocationsValidator"/>


  <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename" value="validation-errors"/>
  </bean>

  <bean id="dataTransferService" class="org.dataminx.dts.ws.service.DataTransferServiceImpl">
    <description>This bean is our "business" service.</description>
    <property name="jobSubmitQueueSender" ref="jobSubmitQueueSender" />
    <property name="jobControlQueueSender" ref="jobControlQueueSender" />
    <property name="jobRepository" ref="jobRepository" />
    <property name="marshaller" ref="marshaller" />
  </bean>

  <!-- Job Submit Message Sender -->
  <bean id="jobSubmitQueueSender" class="org.dataminx.dts.common.jms.JobQueueSender">
    <property name="queue" ref="jmsJobSubmitQueue"/>
    <property name="jmsTemplate" ref="jmsTemplate"/>
  </bean>
  
  <!-- Job Control Message Sender -->
  <bean id="jobControlQueueSender" class="org.dataminx.dts.common.jms.JobQueueSender">
    <property name="queue" ref="jmsJobControlQueue"/>
    <property name="jmsTemplate" ref="jmsTemplate"/>
  </bean>

  <!-- Configure XML Marshaller -->
  <bean class="org.springframework.ws.server.endpoint.adapter.GenericMarshallingMethodEndpointAdapter">
    <constructor-arg ref="marshaller" />
  </bean>

  <bean id="marshaller" class="org.springframework.oxm.xmlbeans.XmlBeansMarshaller">
    <!-- Postel's Law: “Be conservative in what you do; be liberal in what you accept from others.” -->
    <property name="validating" value="false" />
    <property name="xmlOptions">
      <bean class="org.apache.xmlbeans.XmlOptionsBean">
        <property name="savePrettyPrint" value="true" />
        <property name="saveNamespacesFirst" value="true" />
      </bean>
    </property>
  </bean>

  <!-- Instead of just mapping exceptions into the generic SoapFault, we'll wrap the actual DTS Fault elements
  into the SoapFault's detail element -->
  <bean class="org.dataminx.dts.ws.DtsFaultMappingExceptionResolver">
    <description>
      This exception resolver will add custom DTS related SOAP faults if their respective DTS custom exceptions are
      thrown.
    </description>
    <property name="order" value="1" />
  </bean>

  <!-- Map existing exceptions that can be thrown on the Web Service into WS Faults -->
  <!--
  <bean class="org.springframework.ws.soap.server.endpoint.SoapFaultAnnotationExceptionResolver">
    <description>
      This exception resolver maps exceptions with the @SoapFault annotation to SOAP Faults.
    </description>
    <property name="order" value="2" />
  </bean>
  -->

  <!-- Let the SoapFaultMappingExceptionResolver handle the rest of the exceptions -->
  <bean class="org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver">
    <description>
      This exception resolver maps other exceptions to SOAP Faults. Both UnmarshallingException and
      ValidationFailureException are mapped to a SOAP Fault with a "Client" fault code.
      All other exceptions are mapped to a "Server" error code, the default.
    </description>
    <property name="defaultFault" value="SERVER" />
    <property name="exceptionMappings">
      <props>
        <prop key="org.springframework.oxm.UnmarshallingFailureException">CLIENT,Invalid request</prop>
        <prop key="org.springframework.oxm.ValidationFailureException">CLIENT,Invalid request</prop>
      </props>
    </property>
    <property name="order" value="3" />
  </bean>

</beans>