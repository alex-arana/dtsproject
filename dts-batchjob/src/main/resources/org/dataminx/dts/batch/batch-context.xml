<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:batch="http://www.springframework.org/schema/batch"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

  <import resource="file:${user.home}/.dataminx/*-context.xml"/>
<!-- 
  <bean id="dataSource" class="org.springframework.jdbc.datasource.SingleConnectionDataSource">
    <property name="driverClassName" value="${batch.jdbc.driver}" />
    <property name="url" value="${batch.jdbc.url}" />
    <property name="username" value="${batch.jdbc.user}" />
    <property name="password" value="${batch.jdbc.password}" />
  </bean>
-->  

  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="jdbcUrl" value="${batch.jdbc.url}" />
    <property name="user" value="${batch.jdbc.user}" />
    <property name="password" value="${batch.jdbc.password}" />
    <property name="driverClass" value="${batch.jdbc.driver}" />
    <property name="autoCommitOnClose" value="false" />
    <property name="initialPoolSize" value="5" />
    <property name="maxIdleTime" value="300" />
  </bean>

  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" lazy-init="true">
    <property name="dataSource" ref="dataSource" />
  </bean>

  <bean id="dtsVfsUtil" class="org.dataminx.dts.common.vfs.DtsVfsUtil">
    <property name="ftpSupported" value="true" />
    <property name="sftpSupported" value="true" />
    <property name="httpSupported" value="true" />
    <property name="gsiftpSupported" value="true" />
    <property name="srbSupported" value="true" />
    <property name="fileSupported" value="true" />
    <property name="irodsSupported" value="true" />
    <property name="myProxyCredentialLifetime" value="${default.myproxy.lifetime}" />
    <property name="credentialStore" ref="credentialStore"/>
  </bean>
  
  <bean id="jobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <bean id="jobRepository"
        class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="transactionManager" ref="transactionManager"/>
  </bean>
  
  <bean id="dtsJobFactory" class="org.dataminx.dts.batch.DtsJobFactoryImpl">
    <property name="jobRepository" ref="jobRepository"/>
    <property name="credentialStore" ref="credentialStore"/>
  </bean>

  <!-- the task executor below will have to be provided by the calling application  -->
  <bean id="dtsJobLauncher" class="org.dataminx.dts.batch.DtsJobLauncher">
    <property name="jobRepository" ref="jobRepository" />
    <property name="taskExecutor" ref="jobLauncherTaskExecutor"/>
    <property name="dtsJobFactory" ref="dtsJobFactory"/>
  </bean>

  <bean id="dtsJobPartitioner" scope="step" class="org.dataminx.dts.batch.DtsJobPartitioner">
    <property name="dtsJobDetails" value="#{jobExecutionContext[JOB_DETAILS]}"/>
  </bean>
  
  <bean id="jobScopingTask" class="org.dataminx.dts.batch.JobScopingTask" scope="step">
    <property name="submitJobRequest" value="#{jobExecutionContext[SUBMIT_JOB_REQUEST]}"/>
    <property name="jobPartitioningStrategy" ref="jobPartitioningStrategy" />
    <!-- job_resource_key == jobId == messageID == correlationID == same value -->
    <property name="jobResourceKey" value="#{jobExecutionContext[JOB_RESOURCE_KEY]}"/>
    <property name="jobNotificationService" ref="jobNotificationService"/>
    <property name="executionContextCleaner" ref="executionContextCleaner"/>
  </bean>
  
  <bean id="checkRequirementsTask" class="org.dataminx.dts.batch.CheckRequirementsTask" scope="step">
    <property name="jobStepDirectory" value="file:///${dataminx.dir}/jobsteps" />
  </bean>

  <!--
  ExecutionContextPromotionListener used to automatically promote items
  from the Step ExecutionContext to the Job ExecutionContext at the
  end of a step. A list of keys should be provided that correspond to the items
  in the Step ExecutionContext that should be promoted.
  -->
  <bean id="jobScopingTaskPromotionListener" class="org.springframework.batch.core.listener.ExecutionContextPromotionListener">
    <property name="keys" value="JOB_DETAILS" />
  </bean>
  
  <bean id="fileCopyTaskPromotionListener" class="org.springframework.batch.core.listener.ExecutionContextPromotionListener">
    <property name="keys" value="lastCompletedSuspendedStep" />
  </bean>

  <bean id="fileCopyTask" class="org.dataminx.dts.batch.FileCopyTask" scope="step">
    <property name="submitJobRequest" value="#{jobExecutionContext[SUBMIT_JOB_REQUEST]}"/>
    <property name="jobStep" value="#{stepExecutionContext[DATA_TRANSFER_STEP]}"/>
    <property name="dtsVfsUtil" ref="dtsVfsUtil"/>
    <property name="jobNotificationService" ref="jobNotificationService"/>
    <property name="fileCopyingService" ref="fileCopyingService"/>
    <property name="executionContextCleaner" ref="executionContextCleaner"/>
    <property name="fileSystemManagerCache" ref="fileSystemManagerCache"/>
    <property name="stopwatchTimer" ref="stopwatchTimer"/>
    <property name="encrypter" ref="encryptionPlugin" />
    <property name="jobOperator" ref="jobOperator" />
  </bean>
  
  <bean id="fileCopyingService" class="org.dataminx.dts.batch.service.FileCopyingServiceImpl">
    <property name="dtsVfsUtil" ref="dtsVfsUtil"/>
    <property name="encrypter" ref="encryptionPlugin" />
  </bean>
  
  <bean id="dtsFileTransferJob" scope="prototype" class="org.dataminx.dts.batch.DtsFileTransferJob">
    <property name="jobScopingStep" ref="jobScopingStep"/>
    <property name="maxStreamCountingStep" ref="maxStreamCountingStep"/>
    <property name="partitioningStep" ref="partitioningStep"/>
    <property name="checkRequirementsStep" ref="checkRequirementsStep"/>
    <property name="jobExecutionListeners">
      <list>
        <ref bean="dtsFileTransferJobListener"/>
      </list>
    </property>
    <property name="stopwatchTimer" ref="stopwatchTimer"/>
    <property name="jobPartitioningStrategy" ref="jobPartitioningStrategy"/>
  </bean>

  <bean id="stopwatchTimer" class="org.dataminx.dts.common.util.StopwatchTimer"/>
  
  <bean id="dtsFileTransferJobListener" class="org.dataminx.dts.batch.DtsFileTransferJobListener">
    <property name="fileSystemManagerCache" ref="fileSystemManagerCache"/>
    <property name="executionContextCleaner" ref="executionContextCleaner"/>
    <property name="jobExplorer" ref="jobExplorer"/>
    <property name="dtsVfsUtil" ref="dtsVfsUtil"/>
  </bean>
    
  <batch:step id="jobScopingStep">
    <batch:tasklet ref="jobScopingTask">
      <batch:listeners>
          <batch:listener ref="jobScopingTaskPromotionListener"/>
      </batch:listeners>    
    </batch:tasklet>
  </batch:step>
  
  <batch:step id="checkRequirementsStep">
    <batch:tasklet ref="checkRequirementsTask" allow-start-if-complete="true"/>
  </batch:step>

  <batch:step id="fileCopyStep">
    <batch:tasklet ref="fileCopyTask">
      <batch:listeners>
          <batch:listener ref="fileCopyTaskPromotionListener"/>
      </batch:listeners>    
    </batch:tasklet>
  </batch:step>

  <bean id="partitioningStep"
        class="org.springframework.batch.core.partition.support.PartitionStep">
    <property name="partitionHandler">
      <bean class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler">
        <property name="taskExecutor">
          <bean class="org.springframework.core.task.SyncTaskExecutor"/>
        </property>
        <property name="step" ref="fileCopyStep"/>
      </bean>
    </property>
    <property name="stepExecutionSplitter">
      <bean class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
        <constructor-arg ref="jobRepository"/>
        <constructor-arg ref="fileCopyStep"/>
        <constructor-arg ref="dtsJobPartitioner"/>
      </bean>
    </property>
    <property name="jobRepository" ref="jobRepository"/>
  </bean>
  
  
  <!-- DIFFERENT JOB STEP ALLOCATOR TO BE USED BY THE JOB PARTITIONING STRATEGY -->
  <!-- A job step allocator that mixes big and smalls together in a step -->
  <bean id="mixedFilesJobStepAllocator" class="org.dataminx.dts.batch.MixedFilesJobStepAllocator" scope="prototype"/>
  <!-- A job step allocator that groups big files together (and same with small files) in a step -->
  <bean id="categorizedFilesJobStepAllocator" class="org.dataminx.dts.batch.CategorizedFilesJobStepAllocator" scope="prototype">
    <property name="bigFileSize" value="${min.bigfiles.bytes.size}"/>
  </bean>
  
  
  <bean id="jobPartitioningStrategy" class="org.dataminx.dts.batch.AbstractJobPartitioningStrategy">
    <!-- replace the jobStepAllocator implementation here if you want to use a 
         new strategy for partitioning files -->
    <lookup-method  name="createDtsJobStepAllocator" bean="mixedFilesJobStepAllocator"/>
    <property name="dtsVfsUtil" ref="dtsVfsUtil"/>
    <!-- limit the size of each step to not be more than 10MB -->
    <!-- 
    <property name="maxTotalByteSizePerStepLimit" value="${max.total.bytes.perstep}" />
    -->
    <!-- process 3 files per step -->
    <property name="maxTotalFileNumPerStepLimit" value="${max.total.num.files.perstep}" />
    <property name="encrypter" ref="encryptionPlugin" />
  </bean>
  
  <batch:step id="maxStreamCountingStep">
    <batch:tasklet ref="maxStreamCounterTask" allow-start-if-complete="true"/>
  </batch:step>
  
  <bean id="maxStreamCounterTask" class="org.dataminx.dts.batch.MaxStreamCounterTask" scope="step">
    <property name="submitJobRequest" value="#{jobExecutionContext[SUBMIT_JOB_REQUEST]}"/>
    <property name="maxConnectionsToTry" value="${default.max.parallel.connections}"/>
    <property name="dtsVfsUtil" ref="dtsVfsUtil"/>
    <property name="fileSystemManagerCache" ref="fileSystemManagerCache"/>
    <property name="jobRepository" ref="jobRepository"/>
    <property name="dtsJobDetails" value="#{jobExecutionContext[JOB_DETAILS]}"/>
    <property name="encrypter" ref="encryptionPlugin" />
  </bean>
  
  <bean id="fileSystemManagerCache" class="org.dataminx.dts.common.vfs.FileSystemManagerCache"/>
  
  <bean id="executionContextCleaner" class="org.dataminx.dts.batch.common.util.ExecutionContextCleaner">
    <property name="jobRepository" ref="jobRepository"/>
    <property name="jobExplorer" ref="jobExplorer"/>
  </bean>
  
  <bean id="jobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator">
    <property name="jobExplorer" >
        <bean class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
            <property name="dataSource" ref="dataSource" />
        </bean>
    </property>
    <property name="jobRepository" ref="jobRepository" />
    <property name="jobRegistry" ref="jobRegistry" />
    <property name="jobLauncher" ref="dtsJobLauncher" />
  </bean>
  
  <bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />
  <bean id="jobRegistryBeanPostProcessor" class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
    <property name="jobRegistry" ref="jobRegistry"/>
  </bean>


<!--
    	<bean id="encryptionPlugin" class="org.dataminx.dts.security.crypto.DummyEncrypter">
		<property name="passphrase" value="dummy"/>
		<property name="salt" value="dummy"/>
	</bean>
    -->
  
</beans>
