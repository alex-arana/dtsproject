package org.dataminx.dts.ws;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import junit.framework.Assert;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dataminx.dts.client.DataTransferServiceClient;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

@ContextConfiguration(locations = { "/client-context.xml" })
@RunWith(SpringJUnit4ClassRunner.class)
public class DTSClientTest {

    protected final Log logger = LogFactory.getLog(getClass());

    @Autowired
    private DataTransferServiceClient client;

    @Test
    public void testSubmitJob() {
        DocumentBuilderFactory docFactory =
              DocumentBuilderFactory.newInstance();

        try {
            File f = new ClassPathResource("minx-dts.xml").getFile();
            DocumentBuilder builder =
                docFactory.newDocumentBuilder();
            Document dtsJob = builder.parse(f);

            logger.info(client.submitJob(dtsJob));

        } catch (SAXParseException spe) {
            // Error generated by the parser
            logger.error("\n** Parsing error"
                    + ", line " + spe.getLineNumber()
                    + ", uri " + spe.getSystemId());
            logger.error("  " + spe.getMessage() );

            // Use the contained exception, if any
            Exception x = spe;
            if (spe.getException() != null)
                x = spe.getException();
            logger.error("SAXParseException", x);

        } catch (SAXException sxe) {
            // Error generated by this application
            // (or a parser-initialization error)
            Exception x = sxe;
            if (sxe.getException() != null)
                x = sxe.getException();
            logger.error("SAXException", x);

        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            logger.error("ParserConfigurationException", pce);
        } catch (IOException ioe) {
            logger.error("IOException", ioe);
        }
    }

    @Test
    public void testGetJobStatus() {
        client.getJobStatus("http://testjob");
        Assert.assertEquals("Created", client.getJobStatus("http://testjob"));
    }

    @Test
    public void testSuspendJob() {
        client.suspendJob("http://testjob");
        Assert.assertEquals("Suspended", client.getJobStatus("http://testjob"));
    }

    @Test
    public void testResumeJob() {
        client.resumeJob("http://testjob");
        Assert.assertEquals("Transferring", client.getJobStatus("http://testjob"));
    }

    @Test
    public void testCancelJob() {
        Assert.assertEquals("Transferring", client.getJobStatus("http://testjob"));
        client.cancelJob("http://testjob");
        Assert.assertEquals("Done", client.getJobStatus("http://testjob"));

    }

}
