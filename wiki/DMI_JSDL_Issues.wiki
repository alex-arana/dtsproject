#labels DMI,JSDL
= DMI Discussion Points =

== Intro ==
At present, we have resorted to a composite schema that combines both JSDL^1^ and DMI^2^ elements with our own proprietary extensions. Ideally, we would like to produce a standards compliant message format and Web Service implementation (rather than resorting to our proprietary format). This wiki identifies some issues/discussion points and proposed extensions.  

^1^JSDL HPC File Staging Profile: http://www.ogf.org/documents/GFD.135.pdf

^2^OGSA Data Movement Interface: http://www.ogf.org/documents/GFD.135.pdf


===1) Requirement for a Non-WSRF DMI rendering (Doc-literal/RESTfull)===
DMI is currently very WSRF centric. We require a document-literal/RESTfull approach that does not require WSRF service instances and factories, i.e. something like the proposal at the link below; 

Schema: http://code.google.com/p/dtsproject/source/browse/trunk/dts-jaxb/src/main/resources/archive/dmi-wrappedMessagesProposals.xsd 

The key difference between this document-centric rendering and the DMI WSRF-centric approach is that it passes JobIDs back to the client rather than WS-Addressing Endpoint References (which point to DMI service Instances previously created from a factory). 


===2) Need to accommodate multiple transfers in DMI=== 
The DMI functional spec can be used to define a single data transfer between a single source and a single sink. To accommodate multiple transfers, the client interacts with DMI to create multiple service instances, each responsible for a separate transfer (please comment on this if i am wrong!). Potentially, this can place a large communication overhead on the client since many interactions are required between the client and service (e.g. consider the case when copying many different files from a number of sources). 
 
We therefore need to be able to define multiple data transfers within the same request message/packet so that the client can be very thin (i.e. fire request and periodically poll for updates, - see http://www.eaipatterns.com/MessagingComponentsIntro.html for 'atomic' message/packet definition). To do this, we have devised the following 'dmi-wrapped' rendering proposal that effectively combines a source and a sink DEPR within a single element which can be defined multiple times in a single request. This is very similar to the JSDL DataStaging elements that can be defined multiple times within a single JSDL document. See the example schema, doc and pseudo code-frag below;

Schema: 
http://code.google.com/p/dtsproject/source/browse/trunk/dts-jaxb/src/main/resources/archive/dmi-wrappedMessagesProposals.xsd 

Full Doc example: 
http://code.google.com/p/dtsproject/source/browse/trunk/dts-jaxb/src/main/resources/archive/dmi-WrappedDataTransferRequest.xml

{{{
   Pseudo schema request:
    ======================
    <dmi-msg:SubmitWrappedDataTransferRequestMessage>
        <dmi-msg:Start/>
        <dmi-msg:WrappedSourceSinkDEPRs>
            <dmi-msg:SourceDEPR></dmi-msg:SourceDEPR>
            <dmi-msg:SinkDEPR></dmi-msg:SinkDEPR>
            <dmi-msg:TransferRequirements/>
        </dmi-msg:WrappedSourceSinkDEPRs>
        <dmi-msg:WrappedSourceSinkDEPRs>
            <dmi-msg:SourceDEPR></dmi-msg:SourceDEPR>
            <dmi-msg:SinkDEPR></dmi-msg:SinkDEPR>
            <dmi-msg:TransferRequirements/>
        </dmi-msg:WrappedSourceSinkDEPRs>
        <dmi-msg:WrappedSourceSinkDEPRs>
            <dmi-msg:SourceDEPR></dmi-msg:SourceDEPR>
            <dmi-msg:SinkDEPR></dmi-msg:SinkDEPR>
            <dmi-msg:TransferRequirements/>
        </dmi-msg:WrappedSourceSinkDEPRs>
        ...
    </dmi-msg:SubmitWrappedDataTransferRequestMessage>

    Pseudo schema response:
    =======================
   <dmi-msg:GetWrappedDataTransferInstanceResponseMessage>
       <dmi-msg:JobID>jobid-adfafq24-59-4-13</dmi-msg:JobID>
   </dmi-msg:GetWrappedDataTransferInstanceResponseMessage>
}}}

At present the proposal above returns a single JobID for the whole 'bulk' transfer (since a bulk transfer can be made up of multiple sub transfers). This implies that any subsequent request that uses this id (e.g. a request for state, or a request for the dmi instance attributes document) refers to the state of the whole 'bulk' transfer. for example, the total number of bytes transferred would be calculated across all the sub-transfers. Similarly, if one sub-transfer failed out of ten, then the state of the bulk transfer would be 'failed'.

This could certainly be extended further if it is a requirement to query the state of each separate sub-transfer. To do this, the request message (GetDataTransferInstanceRequestType) would have to be extended to incorporate additional user defined sub-transfer tags/ids elements defined for each separate sub-transfer(e.g. mytransferA, mytransferB, mytransferC). In doing this, any subsequent request made by the client could use a combination of the JobID and the sub-transfer tag/id {{{(ie. '<JobID>:<transferTag>')}}} to isolate that specific sub-transfer. The returned state would then represent only that sub-transfer as per the dmi spec.

Note, in this scenario, it would be important that the client assigns the sub-transfer tags/ids while the service assigns the bulk transfer JobID. This is because we do not want to place any significance on the ordering of the sub-transfers in the initial request. 


===3) JSDL CreationOption in DMI ===
Add the the {{{<jsdl:CreationFlag>}}} element, which defines overwrite, dontOverwrite and append enums, to the {{{<dmi:TransferRequirementsType>}}}, e.g. something like the following, but define the CreationFlag within the dmi namespace ?

{{{
        <dmi-msg:TransferRequirements>
            <!--<dmi:StartNotBefore></dmi:StartNotBefore>
            <dmi:EndNoLaterThan>6</dmi:EndNoLaterThan>
            <dmi:StayAliveTime>6</dmi:StayAliveTime>-->
            <dmi:MaxAttempts>2</dmi:MaxAttempts>
            <!-- define CreationFlag in dmi ns ? --> 
            <jsdl:CreationFlag>overwrite</jsdl:CreationFlag>
        </dmi-msg:TransferRequirements>

}}} 



=== 4) Extension points in DMI schema ===
A number of xsd extension points (xsd:any) are required in the current dmi functional spec, e.g in the following DMI elements
  * Data element 
  * list elements here 
  