#labels DMI,JSDL
At present, we have resorted to a composite schema that combines both JSDL^1^ and DMI^2^ elements with our own proprietary extensions. Ideally, we would like to produce a standards compliant message format and Web Service implementation (rather than resorting to our proprietary format). This wiki identifies some key issues/extensions.  

^1^JSDL HPC File Staging Profile: http://www.ogf.org/documents/GFD.135.pdf

^2^OGSA Data Movement Interface: http://www.ogf.org/documents/GFD.135.pdf

 
= DMI Discussion Points =

===1) Requirement for a Non-WSRF DMI rendering (Doc-literal/RESTfull)===
DMI is currently very WSRF centric. We require a document-literal/RESTfull approach, i.e. something like the proposal at the link below; 

Schema: http://code.google.com/p/dtsproject/source/browse/trunk/dts-jaxb/src/main/resources/archive/dmi-wrappedMessagesProposals.xsd 

The key difference between this document-centric rendering and the DMI WSRF-centric approach is that it passes JobIDs back to the client rather than WS-Addressing Endpoint References (in DMI, the endpoint reference points to a DMI service Instance that was previously created from a factory). 


===2) Need to accommodate multiple transfers in DMI=== 
The DMI functional spec can be used to define a single data transfer between a single source and sink. To accommodate multiple transfers, the client interacts with DMI to create multiple service instances, each responsible for a separate transfer (please comment if i am wrong). This places a large communication overhead on the client since many interactions are required between the client and service (e.g. consider when copying 1000 separate files).  
We need to be able to define multiple data transfers within the same 'atomic' request message/packet so that the client can be very thin (i.e. fire and forget). To do this, we have devised the following 'dmi-wrapped' rendering that effectively combines a source and sink DEPR within a single element which can be defined multiple times in a single request. This is very similar to the JSDL DataStaging elements that can be defined multiple times within a single JSDL doc. See the pseudo code below;

Schema: http://code.google.com/p/dtsproject/source/browse/trunk/dts-jaxb/src/main/resources/archive/dmi-wrappedMessagesProposals.xsd 

Full Doc example: http://code.google.com/p/dtsproject/source/browse/trunk/dts-jaxb/src/main/resources/archive/dmi-WrappedDataTransferRequest.xml

{{{
   Pseudo schema request:
    ======================
    <dmi-msg:SubmitWrappedDataTransferRequestMessage>
        <dmi-msg:Start/>
        <dmi-msg:WrappedSourceSinkDEPRs>
            <dmi-msg:SourceDEPR></dmi-msg:SourceDEPR>
            <dmi-msg:SinkDEPR></dmi-msg:SinkDEPR>
            <dmi-msg:TransferRequirements/>
        </dmi-msg:WrappedSourceSinkDEPRs>
        <dmi-msg:WrappedSourceSinkDEPRs>
            <dmi-msg:SourceDEPR></dmi-msg:SourceDEPR>
            <dmi-msg:SinkDEPR></dmi-msg:SinkDEPR>
            <dmi-msg:TransferRequirements/>
        </dmi-msg:WrappedSourceSinkDEPRs>
        <dmi-msg:WrappedSourceSinkDEPRs>
            <dmi-msg:SourceDEPR></dmi-msg:SourceDEPR>
            <dmi-msg:SinkDEPR></dmi-msg:SinkDEPR>
            <dmi-msg:TransferRequirements/>
        </dmi-msg:WrappedSourceSinkDEPRs>
        ...
    </dmi-msg:SubmitWrappedDataTransferRequestMessage>

    Pseudo schema response:
    =======================
   <dmi-msg:GetWrappedDataTransferInstanceResponseMessage>
       <dmi-msg:JobID>jobid-adfafq24-59-4-13</dmi-msg:JobID>
   </dmi-msg:GetWrappedDataTransferInstanceResponseMessage>
}}}

===3) JSDL CreationOption in DMI ===
The jsdl CreationOption element, which defines overwrite, dontOverwrite, append enums, to the dmi:

=== 4) Extension points in DMI schema ===
A number of xsd extension points (xsd:any) are required in the current dmi functional spec, e.g in the following DMI elements
  *dmi:Data 
  